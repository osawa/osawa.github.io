{"version":3,"sources":["webpack://gatsby-starter-blog/./src/components/bio.js","webpack://gatsby-starter-blog/./src/components/tags.js","webpack://gatsby-starter-blog/./src/pages/index.js"],"names":["data","useStaticQuery","author","site","siteMetadata","social","className","S","layout","formats","src","width","height","quality","alt","name","summary","href","twitter","props","tags","map","text","style","listStyle","display","margin","Link","to","location","siteTitle","title","posts","allMarkdownRemark","nodes","length","post","frontmatter","fields","slug","draft","key","itemScope","itemType","itemProp","date","dangerouslySetInnerHTML","__html","description","excerpt"],"mappings":"q6BA2DA,IAhDY,WAAO,IAAD,IACVA,GAAOC,oBAAe,cAiBtBC,EAAM,UAAGF,EAAKG,KAAKC,oBAAb,aAAG,EAAwBF,OACjCG,EAAM,UAAGL,EAAKG,KAAKC,oBAAb,aAAG,EAAwBC,OAEvC,OACE,uBAAKC,UAAU,OACb,gBAAC,EAAAC,EAAD,CACED,UAAU,aACVE,OAAO,QACPC,QAAS,CAAC,OAAQ,OAAQ,QAC1BC,IAAI,4BACJC,MAAO,GACPC,OAAQ,GACRC,QAAS,GACTC,IAAI,kBARN,uBAUCZ,aAAA,EAAAA,EAAQa,OACP,uCACa,8BAASb,EAAOa,MAD7B,KAC6Cb,aAAA,EAAAA,EAAQc,UAAW,KADhE,IAGE,2BAHF,MAKE,qBAAGC,KAAI,yBAAyBZ,aAAA,EAAAA,EAAQa,UAAR,KAAhC,IACIb,aADJ,EACIA,EAAQa,a,qIC/BtB,EAjBa,SAACC,GACZ,IAAMC,EAAOD,EAAMnB,KAAKqB,KAAI,SAACC,GAC3B,OACE,sBAAIC,MAAO,CAACC,UAAU,OAAQC,QAAS,eAAgBC,OAAQ,UAE7D,gBAAC,EAAAC,KAAD,CAAMC,GAAE,QAAUN,GAASA,OAKjC,OACE,0BACGF,ICyDP,EAhEkB,SAAC,GAAwB,IAAD,EAArBpB,EAAqB,EAArBA,KAAM6B,EAAe,EAAfA,SACnBC,GAAY,UAAA9B,EAAKG,KAAKC,oBAAV,eAAwB2B,QAAxB,QACZC,EAAQhC,EAAKiC,kBAAkBC,MAErC,OAAqB,IAAjBF,EAAMG,OAEN,gBAAC,IAAD,CAAQN,SAAUA,EAAUE,MAAOD,GACjC,gBAAC,IAAD,CAAKC,MAAM,cACX,gBAAC,IAAD,MACA,uLAUJ,gBAAC,IAAD,CAAQF,SAAUA,EAAUE,MAAOD,GACjC,gBAAC,IAAD,CAAKC,MAAM,cACX,gBAAC,IAAD,MACA,sBAAIR,MAAO,CAAEC,UAAU,SACpBQ,EAAMX,KAAI,SAAAe,GACT,IAAML,EAAQK,EAAKC,YAAYN,OAASK,EAAKE,OAAOC,KAChDC,EAAQJ,EAAKC,YAAYG,QAAS,EAClCpB,EAAOgB,EAAKC,YAAYjB,MAAQ,GACpC,IAAc,IAAVoB,EACF,OACE,sBAAIC,IAAKL,EAAKE,OAAOC,MAEnB,2BACEjC,UAAU,iBACVoC,WAAS,EACTC,SAAS,6BAET,8BACE,0BACE,gBAAC,EAAAhB,KAAD,CAAMC,GAAIQ,EAAKE,OAAOC,KAAMK,SAAS,OACnC,wBAAMA,SAAS,YAAYb,KAG/B,6BAAQK,EAAKC,YAAYQ,OAG3B,gBAAC,EAAD,CAAM7C,KAAMoB,EAAMqB,IAAI,SACtB,+BACE,qBACEK,wBAAyB,CACvBC,OAAQX,EAAKC,YAAYW,aAAeZ,EAAKa,SAE/CL,SAAS","file":"component---src-pages-index-js-5d0d9de86e5c0a8a4f8c.js","sourcesContent":["/**\n * Bio component that queries for data\n * with Gatsby's useStaticQuery component\n *\n * See: https://www.gatsbyjs.com/docs/use-static-query/\n */\n\nimport * as React from \"react\"\nimport { useStaticQuery, graphql } from \"gatsby\"\nimport { StaticImage } from \"gatsby-plugin-image\"\n\nconst Bio = () => {\n  const data = useStaticQuery(graphql`\n    query BioQuery {\n      site {\n        siteMetadata {\n          author {\n            name\n            summary\n          }\n          social {\n            twitter\n          }\n        }\n      }\n    }\n  `)\n\n  // Set these values by editing \"siteMetadata\" in gatsby-config.js\n  const author = data.site.siteMetadata?.author\n  const social = data.site.siteMetadata?.social\n\n  return (\n    <div className=\"bio\">\n      <StaticImage\n        className=\"bio-avatar\"\n        layout=\"fixed\"\n        formats={[\"AUTO\", \"WEBP\", \"AVIF\"]}\n        src=\"../images/profile-pic.jpg\"\n        width={50}\n        height={50}\n        quality={95}\n        alt=\"Profile picture\"\n      />\n      {author?.name && (\n        <p>\n          Written by <strong>{author.name}</strong> {author?.summary || null}\n          {` `}\n          <br />\n          tw: \n          <a href={`https://twitter.com/${social?.twitter || ``}`}>\n            @{social?.twitter}\n          </a>\n        </p>\n      )}\n    </div>\n  )\n}\n\nexport default Bio\n","import * as React from \"react\"\nimport { Link } from \"gatsby\"\n\nconst Tags = (props) => {\n  const tags = props.data.map((text) => {\n    return (\n      <li style={{listStyle:'none', display: 'inline-block', margin: '0 1em'}}>\n        {/* NOTE: リンク先をtextで指定してていいのか……そもそもテキストをtag名として登録してるからいいのか */}\n        <Link to={`tags/${text}`}>{text}</Link>\n      </li>\n    );\n  });\n\n  return (\n    <ul>\n      {tags}\n    </ul>\n  );\n}\n\nexport default Tags\n","import * as React from \"react\"\nimport { Link, graphql } from \"gatsby\"\n\nimport Bio from \"../components/bio\"\nimport Layout from \"../components/layout\"\nimport Seo from \"../components/seo\"\nimport Tags from \"../components/tags\"\n\nconst BlogIndex = ({ data, location }) => {\n  const siteTitle = data.site.siteMetadata?.title || `Title`\n  const posts = data.allMarkdownRemark.nodes\n\n  if (posts.length === 0) {\n    return (\n      <Layout location={location} title={siteTitle}>\n        <Seo title=\"All posts\" />\n        <Bio />\n        <p>\n          No blog posts found. Add markdown posts to \"content/blog\" (or the\n          directory you specified for the \"gatsby-source-filesystem\" plugin in\n          gatsby-config.js).\n        </p>\n      </Layout>\n    )\n  }\n\n  return (\n    <Layout location={location} title={siteTitle}>\n      <Seo title=\"All posts\" />\n      <Bio />\n      <ol style={{ listStyle: `none` }}>\n        {posts.map(post => {\n          const title = post.frontmatter.title || post.fields.slug\n          let draft = post.frontmatter.draft || false\n          let tags = post.frontmatter.tags || [] // ダサいのでやめたい\n          if (draft !== true) {\n            return (\n              <li key={post.fields.slug}>\n                {/* TODO: コンポーネント化、tag-pageにも使う */}\n                <article\n                  className=\"post-list-item\"\n                  itemScope\n                  itemType=\"http://schema.org/Article\"\n                >\n                  <header>\n                    <h2>\n                      <Link to={post.fields.slug} itemProp=\"url\">\n                        <span itemProp=\"headline\">{title}</span>\n                      </Link>\n                    </h2>\n                    <small>{post.frontmatter.date}</small>\n                  </header>\n                  {/* あるときだけ出したい */}\n                  <Tags data={tags} key=\"tags\" />\n                  <section>\n                    <p\n                      dangerouslySetInnerHTML={{\n                        __html: post.frontmatter.description || post.excerpt,\n                      }}\n                      itemProp=\"description\"\n                    />\n                  </section>\n                </article>\n              </li>\n            )\n          }\n        })}\n      </ol>\n    </Layout>\n  )\n}\n\nexport default BlogIndex\n\nexport const pageQuery = graphql`\n  query {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n    allMarkdownRemark(sort: { fields: [frontmatter___date], order: DESC }) {\n      nodes {\n        excerpt\n        fields {\n          slug\n        }\n        frontmatter {\n          date(formatString: \"YYYY-MM-DD\")\n          title\n          description\n          draft\n          tags\n        }\n      }\n    }\n  }\n`\n"],"sourceRoot":""}