{
    "componentChunkName": "component---src-templates-blog-post-js",
    "path": "/2021-07-27_my-bem-guideline/",
    "result": {"data":{"site":{"siteMetadata":{"title":"osawa no log"}},"markdownRemark":{"id":"9bd3459d-5529-57b0-9dcc-3a60275c2efb","excerpt":"BEMに頼らなきゃいけないときに心がけていること はじめに そもそも2021年にまだBEMを使用していることについて Railsのアセットパイプラインや他のMVCフレームワークなど、CSS Modules/CSS in JS的な運用が難しい案件はまだまだある 実際にはwebpackerなりpostcss…","html":"<p>BEMに頼らなきゃいけないときに心がけていること</p>\n<h2>はじめに</h2>\n<h3>そもそも2021年にまだBEMを使用していることについて</h3>\n<ul>\n<li>\n<p>Railsのアセットパイプラインや他のMVCフレームワークなど、CSS Modules/CSS in JS的な運用が難しい案件はまだまだある</p>\n<ul>\n<li>実際にはwebpackerなりpostcssなりでしっかり設定すればできるはずだが、そこの決裁権がないことがほとんど</li>\n<li>上述の理由であまり知見がない、という恥ずかしい事情もある</li>\n</ul>\n</li>\n<li>単に古い案件の保守がある</li>\n<li>React/Vueの案件ではコンポーネントファイル内でスコープができるため、BEMを用いる必要がないので採用してない</li>\n</ul>\n<h3>なぜ今回まとめようと思ったか</h3>\n<ul>\n<li>引き継ぎで自分の設計したCSS周りの仕様をイチから説明する必要がでてきた</li>\n<li>「なぜここがこうなのか」にはそれぞれ明確な理由があるが、それって案外自分だけで把握してることかもしれず、設計をみただけで理解されやすいものではないと思った</li>\n</ul>\n<h3>そもそもCSSにおける行儀を意識しないと話ができない</h3>\n<ul>\n<li>カスケードしてしまうことによる副作用がつらい</li>\n<li>外部ライブラリの行儀が悪いことによる副作用がつらい</li>\n<li>詳細度のコントロールが必要になる仕様がつらい</li>\n<li>position:absolute/fixedやflexbox、gridなど、必要だけどDOMの構造と密結合なレイアウトがつらい</li>\n</ul>\n<p>これらのつらさをできる限り低減するための方策として、CSS設計なり命名規則（今回のメインであるBEMなど）を活用する必要があることをまず説明しておく必要がある <br>\nが、今回そこまで入れると壮大になるので割愛</p>\n<h3>コンポーネント志向という考え方を共有しないと理解されづらい</h3>\n<ul>\n<li>BEMはまずBlockというひとかたまりのコンポーネントがあり、その中で子要素としてのElementがある、という概念なので、そこをまず理解してもらう必要がある</li>\n<li>Atomic Designを先に知ってもらうのがよさそうだが、あれを忠実に体現するのもまた地獄なので難しい</li>\n</ul>\n<hr>\n<h2>総則</h2>\n<h3>MindBEMdingを採用</h3>\n<ul>\n<li>汚いといわれがちだが、結局クラス名のユニーク性を担保しやすいのでメリットのほうが大きい</li>\n<li>少なくともCSS(SASS)側は<code class=\"language-text\">&amp;</code>の適切な使用によって汚くはならない</li>\n<li>\n<p>HTML側はHamlなりSlimなりを使うことですこし見通しがよくなるが、汚いものは汚い</p>\n<ul>\n<li>慣れればよい、といろいろなところで言われるが実際そのとおりと言うしかない</li>\n<li>過剰なModifier付与を避ければなんとか許容できるようにはなった</li>\n</ul>\n</li>\n</ul>\n<h3>Modifier入りのクラスはModifierなしのクラスと併記する</h3>\n<ul>\n<li>\n<p>これによってSASS内で<code class=\"language-text\">@extend</code>だの、継承のためだけの<code class=\"language-text\">@include</code>だのを使わなくてよくなる</p>\n<ul>\n<li>特に<code class=\"language-text\">@extend</code>はメディアクエリ絡みの制約があって使いづらいため避けたかった</li>\n</ul>\n</li>\n<li>ModifierはあくまでBlockのバリエーションであるという意味性からしても、原型としてのBlockを併記することは宣言的でありわかりやすい</li>\n<li>\n<p>haml/slim記法でいうところの</p>\n<div class=\"gatsby-highlight\" data-language=\"sass\"><pre class=\"language-sass\"><code class=\"language-sass\"><span class=\"token selector\">.block.block--modifierA.block--modifierB.block--modifierC</span></code></pre></div>\n<p>みたいな大変なことになる場合もあるが、これはむしろコンポーネントを分けるサインと捉えていて、こんな冗長になるなら切り分けましょう、という考え方</p>\n</li>\n</ul>\n<h3>Elementの入れ子は行わない</h3>\n<ul>\n<li>BEMのメリットである構造の明確化が損なわれ、過剰に複雑化してしまう</li>\n<li>\n<div class=\"gatsby-highlight\" data-language=\"sass\"><pre class=\"language-sass\"><code class=\"language-sass\"><span class=\"token selector\">.block__elementA__elementBinA__elementCinBinA</span></code></pre></div>\n<p>は素直に<code class=\"language-text\">.block__elementC</code>にすればいいじゃない</p>\n</li>\n</ul>\n<p>よって構造体は以下の6種類に限定される：</p>\n<ul>\n<li><code class=\"language-text\">.block</code></li>\n<li><code class=\"language-text\">.block__element</code></li>\n<li><code class=\"language-text\">.block__element--modifier</code></li>\n<li><code class=\"language-text\">.block--modifier</code></li>\n<li><code class=\"language-text\">.block--modifier__element</code> （非推奨）</li>\n<li><code class=\"language-text\">.block--modifier__element--modifier</code> （非推奨）</li>\n</ul>\n<p>下ふたつを非推奨としたのは「Modifierに依存したコンテクストが生まれる」のが原因で、その問題点はそもそものCSSの仕様とぶつかって大変だとかそういう話になってくるのでここでは行儀がよくないと言うにとどめておくが、個人的には下ふたつは両方とも<code class=\"language-text\">.block__element--modifier</code>に統一するのがシンプルで良いと考えている</p>\n<hr>\n<h2>細則</h2>\n<h3>SASSを使う、そしてSASS記法を使う</h3>\n<ul>\n<li>BEMと直接関係はないが、セミコロンだの波括弧だのを省きたい</li>\n<li>インデントによる構造管理は記述の自由度を制限できるので、汚い書き方をされづらい</li>\n</ul>\n<h3>SASS記法におけるインデントレベルとBEMの構造に一定の関連をもたせる</h3>\n<ul>\n<li>\n<p>上述の「Elementの入れ子は行わない」ことで規定された6種類の構造体は以下のようなインデント構成で記述される：</p>\n<div class=\"gatsby-highlight\" data-language=\"sass\"><pre class=\"language-sass\"><code class=\"language-sass\"><span class=\"token selector\">.block</span>\n  <span class=\"token selector\">&amp;__element</span>\n    <span class=\"token selector\">&amp;--modifier</span>\n  <span class=\"token selector\">&amp;--modifier</span>\n    <span class=\"token selector\">&amp;__element // 非推奨</span>\n      <span class=\"token selector\">&amp;--modifier // 非推奨</span></code></pre></div>\n<p>特に<code class=\"language-text\">.block__element</code>は必ず1インデント、<code class=\"language-text\">.block__element--modifier</code>は必ず2インデントになることが重要で、これによってsassファイルを目視した際に構造を把握しやすい</p>\n</li>\n</ul>\n<h3>なるべくすべての要素にBEM形式のクラスを付与するが、厳密化しすぎない</h3>\n<ul>\n<li>要素にスタイルをあてるのは行儀が悪いので、面倒でもコンポーネント内部の要素すべてにBEM形式のクラス名を付けたい</li>\n<li>\n<p>だがいくらなんでも冗長性が高くなりすぎるもの、DOM構造がカチカチに固定されるものは例外的に許容したい</p>\n<ul>\n<li>\n<p>その場合は親子セレクタを用いることでなるべく影響範囲を狭める</p>\n<div class=\"gatsby-highlight\" data-language=\"sass\"><pre class=\"language-sass\"><code class=\"language-sass\"><span class=\"token selector\">table.block</span>\n  <span class=\"token selector\">> thead, > tbody, > tr</span>\n    <span class=\"token selector\">th, td</span></code></pre></div>\n</li>\n</ul>\n</li>\n</ul>\n<h3><code class=\"language-text\">&amp;</code>をElementやModifier名の一部として用いない</h3>\n<ul>\n<li>\n<p>たとえば<code class=\"language-text\">.block__element</code>と<code class=\"language-text\">.block__element-name</code>があったとして</p>\n<div class=\"gatsby-highlight\" data-language=\"sass\"><pre class=\"language-sass\"><code class=\"language-sass\"><span class=\"token selector\">.block</span>\n  <span class=\"token selector\">&amp;__element</span>\n    <span class=\"token selector\">&amp;-name</span></code></pre></div>\n<p>のようにすると、上述のインデントレベルとの関連性が崩れてしまうため、この場合は素直に以下のように分ける</p>\n<div class=\"gatsby-highlight\" data-language=\"sass\"><pre class=\"language-sass\"><code class=\"language-sass\"><span class=\"token selector\">.block</span>\n  <span class=\"token selector\">&amp;__element</span>\n  <span class=\"token selector\">&amp;__element-name</span></code></pre></div>\n</li>\n<li>\n<p><code class=\"language-text\">&amp;</code>の用法としては以下にまとめられる：</p>\n<div class=\"gatsby-highlight\" data-language=\"sass\"><pre class=\"language-sass\"><code class=\"language-sass\"><span class=\"token selector\">.block</span>\n  <span class=\"token selector\">&amp;, > img // 自身および自身の子孫セレクタに影響を及ぼす場合</span>\n<span class=\"token property-line\">  <span class=\"token property\">&amp;</span><span class=\"token punctuation\">:</span><span class=\"token property\">hover,</span> <span class=\"token property\">&amp;</span><span class=\"token punctuation\">:</span><span class=\"token property\">focus</span> <span class=\"token operator\">/</span><span class=\"token operator\">/</span> 疑似クラス</span>\n<span class=\"token property-line\">  <span class=\"token property\">&amp;</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token property\">before,</span> <span class=\"token property\">&amp;</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token property\">after</span> <span class=\"token operator\">/</span><span class=\"token operator\">/</span> 疑似要素</span>\n  <span class=\"token selector\">&amp;.is-active // JavaScript等によって動的に付与されるクラスをコンテクストとする場合</span></code></pre></div>\n</li>\n</ul>\n<h3>同一のメディアクエリは1コンポーネントにつき1回の記述で済ませる</h3>\n<ul>\n<li>\n<p>そもそも<code class=\"language-text\">@media</code>を直で書きたくないので以下のようにmixinを作っているが、直書きでも同様</p>\n<div class=\"gatsby-highlight\" data-language=\"sass\"><pre class=\"language-sass\"><code class=\"language-sass\"><span class=\"token variable-line\"><span class=\"token variable\">$breakpoint_md</span><span class=\"token punctuation\">:</span> 768px</span>\n<span class=\"token atrule-line\"><span class=\"token atrule\">@mixin</span> min-screen($breakpoint: $breakpoint_md)</span>\n<span class=\"token atrule-line\">  <span class=\"token atrule\">@media</span> screen and (min-width: $breakpoint)</span>\n<span class=\"token atrule-line\">    <span class=\"token atrule\">@content</span></span></code></pre></div>\n</li>\n<li>\n<p>上記mixinを用いる場合、どの階層でも用いることができるが、記述がバラケて追えなくなるので一箇所にまとめる</p>\n<ul>\n<li>インデントをなるべく統一する意味でも複数の階層に記述されるべきではない</li>\n</ul>\n</li>\n</ul>\n<h3><code class=\"language-text\">.block__element</code>と<code class=\"language-text\">.block--modifier</code>と<code class=\"language-text\">@media</code>の記述順を統一する</h3>\n<ul>\n<li>これらはともに1インデントで記述されるため、パッと見で見間違えるリスクが残る</li>\n<li><code class=\"language-text\">.block__element</code>と<code class=\"language-text\">.block--modifier</code>はどの順でも問題ないが、記述順を統一しておくことでリスクを低減する</li>\n<li>余裕があればコメントで区切る</li>\n<li>いっそ<code class=\"language-text\">.block--modifier</code>をインデントなしで書いてしまうのもアリだとは感じているが、<code class=\"language-text\">.block</code>に内包されるものであることを宣言的に示せるので上記のようにしている</li>\n<li><code class=\"language-text\">@media</code>（およびメディアクエリ用mixin）は最下部にまとめる</li>\n</ul>\n<p>まとめると下記のようになる：</p>\n<div class=\"gatsby-highlight\" data-language=\"sass\"><pre class=\"language-sass\"><code class=\"language-sass\"><span class=\"token selector\">.block</span>\n  <span class=\"token selector\">...</span>\n  <span class=\"token selector\">&amp;--modifier</span>\n    <span class=\"token selector\">...</span>\n  <span class=\"token selector\">&amp;__element</span>\n    <span class=\"token selector\">...</span>\n\n  <span class=\"token comment\">// mixinを用いる場合</span>\n<span class=\"token atrule-line\">  <span class=\"token atrule\">@include</span> min-screen</span>\n    <span class=\"token selector\">...</span>\n    <span class=\"token selector\">&amp;--modifier</span>\n      <span class=\"token selector\">...</span>\n    <span class=\"token selector\">&amp;__element</span>\n      <span class=\"token selector\">...</span>\n\n<span class=\"token comment\">// @mediaを直で書く場合</span>\n<span class=\"token atrule-line\"><span class=\"token atrule\">@media</span> (min-width: 768px)</span>\n  <span class=\"token selector\">.block</span>\n    <span class=\"token selector\">...</span>\n    <span class=\"token selector\">&amp;--modifier</span>\n      <span class=\"token selector\">...</span>\n    <span class=\"token selector\">&amp;__element</span>\n      <span class=\"token selector\">...</span></code></pre></div>","frontmatter":{"title":"（いまさら）BEMと仲良くするための個人的なガイドライン","date":"2021-07-27","description":"BEMに頼らなきゃいけないときに心がけていること","modified_at":null}},"previous":{"fields":{"slug":"/2021-07-20_aos-3rd-path-to-glory/"},"frontmatter":{"title":"【AoS】3版「栄光への道 / Path to Glory」のルールまとめ","draft":null}},"next":{"fields":{"slug":"/2021-09-18_aos-economical-building-stormcasts/"},"frontmatter":{"title":"【AoS】経済的にストキャスを組みたいのでコスパ表を作った","draft":null}}},"pageContext":{"id":"9bd3459d-5529-57b0-9dcc-3a60275c2efb","previousPostId":"252ad58a-1465-539f-8991-bbb2c13dede9","nextPostId":"510d0273-6285-5819-bc7d-8b677aa351be"}},
    "staticQueryHashes": ["2841359383","3257411868"]}